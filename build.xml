<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Incidencias" default="default" basedir=".">
    <description>Builds, tests, and runs the project Incidencias.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties 
      -post-init:                called after initialization of project properties 
      -pre-compile:              called before javac compilation 
      -post-compile:             called after javac compilation 
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-dist:                 called before archive building 
      -post-dist:                called after archive building 
      -post-clean:               called after cleaning build products 
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-junit:   defines macro for junit execution
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
    <target name="deployProduction" depends="-enableProduccion,dist,-deployProduccion" >
      <!-- Para poder compilar se necesitan las variables
            j2ee.server.home <- Path de una carpeta que contiene la subcarpeta /lib con el fichero servlet-api.jar
            libs.CopyLibs.classpath <- Path con el fichero org-netbeans-modules-java-j2seproject-copylibstask.jar
        -->

        <!--
            Se necesitan los siguientes ficheros para Ant:
            xmltask.jar
            ant-contrib-1.0b3.jar
            catalina-ant.jar
        -->


        <!--
            El fichero ${incidencias.productionFile} debe tener las siguientes propiedades:
            tomcat.production.url
            tomcat.production.user  <- Opcional. Por defecto es admin
            tomcat.producion.password

            datasource.datos.url
            datasource.datos.username
            datasource.datos.password
        -->
    </target>


    <!-- Para tener el try-cath -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    <!-- Manejo de ficheros XML -->
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>

    <target name="-pre-compile">
        <delete file="${build.web.dir}/index.jsp"/>
        <delete file="${build.web.dir}/META-INF/context.xml"/>
        <delete file="${build.web.dir}/WEB-INF/web.xml"/>
    </target>

    <target name="-pre-dist" depends="-pre-dist-configureDesarrollo,-pre-dist-configureProduccion">
        <tstamp>
            <format property="num_compilacion" pattern="yyyyddMM-HHmmss" />
        </tstamp>

        <replace file="${build.web.dir}/index.jsp" token="#num_compilation#" value="${num_compilacion}"/>
    </target>

    <target name="-pre-dist-configureDesarrollo"  >
        <!-- Poner el path local de desarrollo del diccionario -->
        <xmltask source="${build.web.dir}/WEB-INF/web.xml" dest="${build.web.dir}/WEB-INF/web.xml" >
            <remove path="/:web-app/:context-param/:param-name[text()='elf.startup.dictionaryUri']/following-sibling:::param-value/text()" /> 
            <insert path="/:web-app/:context-param/:param-name[text()='elf.startup.dictionaryUri']/following-sibling:::param-value" xml="file:///${basedir}/${src.dir}/dictionary.xml" />
        </xmltask>
    </target>

    <target name="-pre-dist-configureProduccion" if="enableProduccion" >
        <echo>Configurando para producción</echo>

        <!-- propiedades del entorno de producción -->
        <property file="${incidencias.productionFile}" />
        <!--
            OJO:siempre despues de cargar el fichero de propiedades
            Pq al ser las propiedades inmutables, si no tiene valor se pone por defecto.
        -->
        <property name="tomcat.production.user" value="admin"/>

        <!-- Propiedades del proyecto -->
        <property file="nbproject/project.properties"/>

        <!-- Cargar el context.xml para averiguar la ruta de la app -->
        <xmlproperty file="${web.docbase.dir}/META-INF/context.xml" />

        <!-- Poner los datos de la conexión de producción -->
        <xmltask source="${build.web.dir}/META-INF/context.xml" dest="${build.web.dir}/META-INF/context.xml" >
            <replace path="/Context/Resource[@name='DATOS' and @driverClassName='com.mysql.jdbc.Driver']/@url" withText="${datasource.datos.url}" />
            <replace path="/Context/Resource[@name='DATOS' and @driverClassName='com.mysql.jdbc.Driver']/@username" withText="${datasource.datos.username}" />
            <replace path="/Context/Resource[@name='DATOS' and @driverClassName='com.mysql.jdbc.Driver']/@password" withText="${datasource.datos.password}" />
        </xmltask>

        <!-- Borrar path local de desarrollo del diccionario pq así se busca en el classpath el diccionario -->
        <xmltask source="${build.web.dir}/WEB-INF/web.xml" dest="${build.web.dir}/WEB-INF/web.xml" >
            <remove path="/:web-app/:context-param/:param-name[text()='elf.startup.dictionaryUri']/following-sibling:::param-value/text()" />
        </xmltask>
    </target>

    <target name="-enableProduccion"  >
        <property name="enableProduccion" value="yes"/>
    </target>
    
    <target name="-deployProduccion" depends="-undeployProduccion"  >
        <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" />
        <taskdef name="start" classname="org.apache.catalina.ant.StartTask" />

        <echo>Desplegado aplicación ${Context(path)} ........</echo>
        <deploy url="${tomcat.production.url}/manager" username="${tomcat.production.user}" password="${tomcat.production.password}" path="${Context(path)}" war="${basedir}/${dist.war}" update="true"/>
        <start url="${tomcat.production.url}/manager" username="${tomcat.production.user}" password="${tomcat.production.password}" path="${Context(path)}" />
    </target>


    <target name="-undeployProduccion">
        <taskdef name="stop" classname="org.apache.catalina.ant.StopTask" />
        <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" />

        <trycatch property="exception" >
            <try>
                <stop url="${tomcat.production.url}/manager" username="${tomcat.production.user}" password="${tomcat.production.password}" path="${Context(path)}"/>
            </try>
            <catch>
                <echo>No se pudo parar la aplicacion en Tomcat.Excepcion ${exception}</echo>
            </catch>
        </trycatch>
        <trycatch property="exception">
            <try>
                <undeploy url="${tomcat.production.url}/manager" username="${tomcat.production.user}" password="${tomcat.production.password}" path="${Context(path)}"/>
            </try>
            <catch>
                <echo>No se pudo replegar la aplicación en Tomcat.Excepcion ${exception}</echo>
            </catch>
        </trycatch>
    </target>	
	
</project>
